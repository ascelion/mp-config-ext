apply plugin: 'maven-publish'

def doPublish  = project.hasProperty( 'doPublish' )

def signKey    = "${publishName}.sign.keyId"
def signSecret = "${publishName}.sign.keySecret"
def bintrayUSR = "${publishName}.bintray.username"
def bintrayPWD = "${publishName}.bintray.password"

def gext       = gradle.ext

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier = 'sources'
}

task javadocJar(type: Jar) {
	from javadoc
	classifier = 'javadoc'
}

javadoc {
	failOnError = true

	options {
		source = sourceCompatibility
		memberLevel = 'PROTECTED'
		//overview = file( 'src/main/java/overview.html' )
		links += ['https://docs.oracle.com/javase/8/docs/api']
	}
}

publishing {
	publications {
		maven( MavenPublication ) {
			from components.java

			artifact sourcesJar
			artifact javadocJar

			pom {
				name = artifactId
				url = "https://github.com/ascelion/${publishName}"
				scm {
					url = "https://github.com/ascelion/${publishName}"
					connection = "https://github.com/ascelion/${publishName}.git"
					developerConnection = "git@github.com:ascelion/${publishName}.git"
				}
				licenses {
					license {
						name = 'GNU Affero General Public License version 3'
						url = 'https://opensource.org/licenses/AGPL-3.0'
						distribution = 'repo'
					}
				}
				withXml {
					def xml = it.asNode()
					def dm = xml.dependencyManagement.dependencies
					def dd = xml.dependencies

					dd.'*'
						.findAll { node -> node.version.text() == '' }
						.each { node ->
							def dep =  dm.'*'.find {
								node.groupId.text() == it.groupId.text() &&
								node.artifactId.text() == it.artifactId.text() &&
								node.classifier.text() == it.classifier.text()
							}
	
							node.appendNode( 'version', dep.version.text() )
						}

					xml.remove xml.dependencyManagement
				}
			}
		}
	}

	if( doPublish && gradle.hasProperty( bintrayUSR ) ) {
		repositories {
			maven {
				name = 'jfrog'
				url = "https://oss.jfrog.org/artifactory/oss-${isSnapshot ? 'snapshot' : 'release'}-local"

				credentials {
					username = gext[bintrayUSR]
					password = gradle.decryptPassword( gext[bintrayPWD] )
				}
			}
		}
	}
}

if( gradle.hasProperty( signKey ) ) {
	apply plugin: 'signing'

	ext['signing.gnupg.keyName'] = gext[signKey]

	signing {
		useGpgCmd()
		sign publishing.publications.maven
	}
}
